・ReactはFacebook社が開発したJavaScriptのライブラリ
＝ ユーザインターフェース構築のための JavaScript ライブラリ
   サーバから受け取った値をHTMLに変換する、という機能を持つ

   イベントを設定する実装が絡んできた時、「ERB + 通常のJavaScriptによる実装」と「Reactによる実装」とを比較するとReactの方が優れている点
   1. フロントエンドの機能が複雑になっても「読みやすく変更に強いコード」を書きやすい
   2. ページが表示されるまでのスピードが早い

   HTMLがWebページとして閲覧されるまでの流れ
   1. HTMLを解析、DOMに変換
   2. CSS、JavaScriptを読み込み、見た目を描画
   3. ユーザーがページを閲覧

   JavaScriptを使うとDOMツリーを操作することができる

   ※ノードとは？
   ノードとは DOMでは、HTMLの中にあるすべてを「ノード」という単位で区切ります。 <html>、<body>、<h1>、<p>といったHTMLタグや、コメント、属性、テキストすべてがノードです。

  
Reactは、全く違うアプローチでコードが複雑になる問題を解決する
ポイントは、画面上の要素を部品と見立て、その部品に「状態」を持たせるようにしたこと
状態の例
・ボタンがクリックされているか/されていないか
・カートの中身が設定金額を超えているか/超えていないか
・ユーザーがログインしているか/していないか

Reactでは、それぞれの状態に対応するviewをあらかじめ書いておく
また、ユーザーの操作などによる要素の状態変化を検知し、ロジックを適用して自動で画面を更新する仕組みがある

# 宣言型UI：最終的に表示される描画が明確になっている形

宣言型UIのメリット
・コードから最終的な画面の状態を把握しやすく、途中の時間軸を想像する必要がない
・表示に関してのロジックと純粋な計算などに関してのロジックを分離できる

# 仮想DOM：DOMを模した樹形図状の構造をJavaScriptで作ったもの
→ JavaScriptがHTMLを書き換え描画変更を行うスピードを最速化する仕組み
  Reactには仮想DOMが組み込まれている

  仮想DOMの仕組み
  1. ユーザーがブラウザで何らかの操作を行う
  2. 現在のDOMを模したJavaScriptの構造体(仮想DOM)を2つ作り、片方は操作による変更を加える
  3. 変化前と変化後の仮想DOMを比較し、変化の差分を特定する
  4. 変化した分だけを本当のDOMに反映する
→ DOMを扱うブラウザとJavaScriptとで相互作用する必要がなく、JavaScriptのみでロジック部分から表示したい形を作るところまで完結するため、処理はシンプルで早くなる
  差分を高速でブラウザに反映する具体的なやり方はReactのフレームワークにアルゴリズムとして内包されており、Reactの利用者はほとんどその仕組みを意識することなくこのメリットを享受できる

Reactを使う理由
「宣言的UI」と「仮想DOM」、これらを組み合わせることで、問題であった「複雑な処理への対処」と「描画スピード」という2つの問題を一挙に解決してしまったのがReact